{"version":3,"sources":["components/Pagination.js","components/FilterButtons.js","components/SortButtons.js","components/SorterFilter.js","components/ToDoInput.js","components/ToDoListItem.js","components/ToDoList.js","axiosComfig.js","App.js","reportWebVitals.js","index.js"],"names":["Pagination","totalPosts","postsPerPage","currentPage","setCurrentPage","pageNumbers","i","Math","ceil","push","Grid","container","Button","color","onClick","item","xs","ButtonGroup","fullWidth","map","number","variant","length","FilterButtons","handleFilter","filterType","title","type","button","SortButtons","handleSorter","sorterType","handleButton","IconButton","SorterFilter","sorterFilter","setSorterFilter","direction","alignItems","justify","Typography","prev","ToDoInput","handleSubmit","useState","todo","setTodo","pressEnter","event","a","key","preventDefault","TextField","multiline","label","margin","onChange","e","target","value","onKeyDown","styles","border","borderRadius","marginBottom","ToDoLIstItem","handleDelete","handleCheck","handleTodoChange","time","createdAt","match","toggleInput","setToggleInput","name","inputValue","setInputValue","handleKeyDown","ListItem","style","Checkbox","checked","done","icon","checkedIcon","autoFocus","ListItemText","primary","overflowWrap","uuid","ToDoList","todos","List","axiosConfig","axios","create","baseURL","App","POSTurl","setTodos","isLoading","setIsLoading","fetchTodos","useCallback","get","params","filterBy","order","res","data","useEffect","post","id","delete","patch","paginateTodos","useMemo","APItodos","indexOfLastPost","indexOfFirstPost","slice","Container","maxWidth","align","CircularProgress","alert","open","Snackbar","autoHideDuration","Alert","severity","status","message","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","interceptors","response","use","error","console","log","Promise","reject","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fa8f5bd.chunk.js","sourcesContent":["import { Button, ButtonGroup, Grid } from '@material-ui/core';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport React from 'react';\n\nexport const Pagination = ({ totalPosts, postsPerPage , currentPage, setCurrentPage}) => {\n    const pageNumbers = [];\n    for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n        pageNumbers.push(i);\n    };\n\n    return (\n        <Grid container>\n            <Button \n                color='primary'\n                onClick={() => setCurrentPage(1)}>\n                <ArrowBackIosIcon />\n                <ArrowBackIosIcon />\n            </Button>\n                <Grid item xs={9}>\n                    <ButtonGroup fullWidth>\n                    {pageNumbers.map(number => (\n                <Button \n                    color='primary'\n                    key={number} \n                    variant={number === currentPage && 'contained'}\n                    onClick={() => setCurrentPage(number)}>\n                    {number}\n                </Button>\n            ))}\n                    </ButtonGroup>\n\n                </Grid>\n            \n            <Button \n                color='primary'\n                onClick={() => setCurrentPage(pageNumbers.length)}>\n                <ArrowForwardIosIcon />\n                <ArrowForwardIosIcon />\n            </Button>\n        </Grid>\n    );\n};","import { Button, ButtonGroup } from '@material-ui/core';\nimport React from 'react';\n\nexport const FilterButtons = ({ handleFilter, filterType }) => {\n    const buttons = [{title: 'All', type: ''},\n                     {title: 'Done',type: 'done'},\n                     {title: 'Undone', type: 'undone'}];\n\n    return (\n        <ButtonGroup >\n            {buttons.map((button) => (\n                <Button color='primary'\n                    key={button.title}\n                    variant={button.type === filterType && 'contained'}\n                    onClick={() => {\n                        if (filterType !== button.type) {\n                            return handleFilter(button.type)\n                        }\n                    }}>{button.title}</Button>\n            ))}\n        </ButtonGroup>\n    );\n};","import { IconButton } from '@material-ui/core';\nimport React from 'react';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\n\nexport const SortButtons = ({ handleSorter , sorterType}) => {\n    const handleButton = (type) => {\n        if(type !== sorterType){\n            handleSorter(type);\n        };\n    };\n\n    return (\n        <>\n            <IconButton color={sorterType ? 'primary' : 'default'}\n                onClick={() => handleButton(true)}>\n                <ArrowUpwardIcon />\n            </IconButton>\n            <IconButton color={!sorterType ? 'primary' : 'default'}\n                onClick={() => handleButton(false)}>\n                <ArrowDownwardIcon />\n            </IconButton>\n        </>\n    );\n};","import { Grid, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { FilterButtons } from \"./FilterButtons\";\nimport { SortButtons } from \"./SortButtons\";\n\nexport const SorterFilter = ( { sorterFilter, setSorterFilter, setCurrentPage }) => {\n\n    const handleSorter = (type) => {\n        setSorterFilter(prev => ({...prev, sorterType: type}));\n        setCurrentPage(1);\n    };\n\n    const handleFilter = (type) => {\n        setSorterFilter({sorterType: true, filterType: type});\n        setCurrentPage(1);\n    };\n\n\n    return (\n        <Grid container\n            direction='row'\n            alignItems='center'\n            justify='space-between'>\n            <Grid >\n                <FilterButtons handleFilter={handleFilter}\n                               filterType={sorterFilter.filterType} />\n            </Grid>\n            <Grid >\n                <Grid container\n                    direction='row'\n                    alignItems='center'\n                >\n                    <Typography>Sort by Date</Typography>\n                    <SortButtons handleSorter={handleSorter}\n                                 sorterType={sorterFilter.sorterType} />\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n};","import { TextField } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nexport const ToDoInput = ({ handleSubmit }) => {\n    const [todo, setTodo] = useState('');\n    \n    const pressEnter = async (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            await handleSubmit(todo);\n            setTodo('');\n        };\n    };\n\n    return (\n        <TextField\n            multiline={true}\n            label='ToDo'\n            fullWidth\n            variant='outlined'\n            margin='normal'\n            onChange={e => setTodo(e.target.value)}\n            onKeyDown={(e) => pressEnter(e)}\n            value={todo}\n        />\n    );\n};","import { Checkbox, Grid, IconButton, ListItem, ListItemText, TextField } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\n\nconst styles = {\n    border: '1px solid rgba(0, 0, 0, 0.23)',\n    borderRadius: '5px',\n    marginBottom: '10px'\n};\n\nexport const ToDoLIstItem = ({ todo, handleDelete, handleCheck, handleTodoChange }) => {\n    const time = todo.createdAt.match(/\\d+.\\d+.\\d+/s)[0];\n    const [toggleInput, setToggleInput] = useState(false);\n    const [inputValue, setInputValue] = useState(todo.name);\n\n    const handleKeyDown = async (todo, e) => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            await handleTodoChange(todo, inputValue);\n            setToggleInput(false);\n        };\n        if (e.key === 'Escape') {\n            setToggleInput(false);\n            setInputValue(todo.name);\n        };\n    };\n\n    return (\n        <ListItem style={styles}>\n            <Grid container\n                direction='row'\n                alignItems='center'>\n                <Grid item xs={1}>\n                    <Checkbox\n                        onChange={() => handleCheck(todo)}\n                        checked={todo.done}\n                        color='primary'\n                        icon={<RadioButtonUncheckedIcon />}\n                        checkedIcon={<CheckCircleIcon />}\n                    />\n                </Grid>\n                <Grid item xs={8}>\n                    {toggleInput\n                        ? <TextField\n                            multiline={true}\n                            value={inputValue}\n                            fullWidth\n                            variant='outlined'\n                            autoFocus={true}\n                            onChange={e => setInputValue(e.target.value)}\n                            onKeyDown={e => handleKeyDown(todo, e)} />\n                        : <ListItemText primary={todo.name}\n                            style={{ overflowWrap: 'break-word' }}\n                            multiline='true'\n                            onClick={() => setToggleInput(true)} />}\n                </Grid>\n                <Grid item xs={2}>\n                    <ListItemText primary={time} />\n                </Grid>\n                <Grid item xs={1}>\n                    <IconButton onClick={() => handleDelete(todo.uuid)}>\n                        <DeleteIcon />\n                    </IconButton>\n                </Grid>\n            </Grid>\n        </ListItem>\n    );\n};\n\n","import { List } from '@material-ui/core';\nimport React from 'react';\nimport { ToDoLIstItem } from './ToDoListItem';\n\nexport const ToDoList = ({ todos, handleDelete, handleCheck, handleTodoChange }) => {\n    return (\n        <List>\n            {todos.map((todo) => (\n                <ToDoLIstItem\n                    key={todo.uuid}\n                    todo={todo}\n                    handleDelete={handleDelete}\n                    handleCheck={handleCheck}\n                    handleTodoChange={handleTodoChange}\n                />\n            ))}\n        </List>\n    );\n};","import axios from 'axios'\n\n\nconst axiosConfig = axios.create({\n    baseURL: 'https://todo-api-learning.herokuapp.com'\n});\n\n\nexport default axiosConfig;\n\n\n\n\n\n\n\n","import { CircularProgress, Container, Grid, Snackbar, Typography } from '@material-ui/core';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\nimport { SorterFilter } from './components/SorterFilter';\nimport { ToDoInput } from './components/ToDoInput';\nimport { ToDoList } from './components/ToDoList';\nimport axios from './axiosComfig'\nimport { Alert } from '@material-ui/lab';\n\nfunction App() {\n  //State\n  const POSTurl = '/v1/task/3'\n  const [todos, setTodos] = useState([]);\n  const [sorterFilter, setSorterFilter] = useState({ sorterType: true, filterType: '' });\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(5);\n  const [isLoading, setIsLoading] = useState(true)\n\n  //Fetch todos from API\n\n  const fetchTodos = useCallback(async () => {\n    //creating GETurl\n    const { sorterType, filterType } = sorterFilter;\n\n    const res = await axios.get('/v1/tasks/3',{\n      //SorterParams\n      params: {\n        filterBy: filterType,\n        order: sorterType ? 'desc' : 'asc'\n      }});\n    setTodos(res.data);\n    setIsLoading(false);\n  },[sorterFilter])\n\n  useEffect(() => {\n      fetchTodos()\n  }, [fetchTodos]) \n\n  //Action functions\n  //Add Todo\n  const handleSubmit = async (todo) => {\n    await axios.post(POSTurl,\n      {\n        \"name\": todo,\n        \"done\": false\n      });\n      await fetchTodos();\n    };\n    //Delete Todo\n    const handleDelete = async (id) => {\n      await axios.delete(`${POSTurl}/${id}`);\n      await fetchTodos();\n    };\n    //Check Todo\n    const handleCheck = async (todo) => {\n      await axios.patch(`${POSTurl}/${todo.uuid}`,\n      {\n        \"name\": todo.name,\n        \"done\": !todo.done\n      });\n      await fetchTodos();\n    };\n  //Change Todo\n  const handleTodoChange = async (todo, inputValue) => {\n    await axios.patch(`${POSTurl}/${todo.uuid}`,\n      {\n        \"name\": inputValue,\n        \"done\": todo.done\n      });\n      await fetchTodos();\n  };\n\n  //Paagination logic\n  const paginateTodos = useMemo(() => {\n    const APItodos = [...todos]\n    const indexOfLastPost = currentPage * postsPerPage;\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\n    const currentPosts = APItodos.slice(indexOfFirstPost, indexOfLastPost);\n    return currentPosts;\n  }, [currentPage, postsPerPage, todos]);\n\n  return (\n    <Container maxWidth='sm'>\n      <Typography variant='h1' align='center'>To Do</Typography>\n      <ToDoInput handleSubmit={handleSubmit}\n        todos={todos}\n        setTodos={setTodos}\n      />\n      <SorterFilter\n        sorterFilter={sorterFilter}\n        setSorterFilter={setSorterFilter}\n        setCurrentPage={setCurrentPage} />\n      {!isLoading &&\n        <ToDoList\n          todos={paginateTodos}\n          handleCheck={handleCheck}\n          handleDelete={handleDelete}\n          handleTodoChange={handleTodoChange} />}\n      {(todos.length > 5 && !isLoading) &&\n        <Pagination\n          totalPosts={todos.length}\n          postsPerPage={postsPerPage}\n          currentPage={currentPage}\n          setCurrentPage={setCurrentPage} />\n      }\n      {isLoading &&\n        <Grid container alignItems='center' direction='column'>\n          <Grid item><CircularProgress/></Grid>\n        </Grid>\n      }\n          {alert.open && <Snackbar open={alert.open} autoHideDuration={2000}>\n      <Alert severity=\"error\">\n        {`Status: ${alert.status} \n            Message: ${alert.message}`}\n      </Alert>\n    </Snackbar>}\n\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport axios from './axiosComfig'\n\n\n\n\naxios.interceptors.response.use(null, error => {\n  console.log('STATUS', error.response.status);\n  console.log('DATA', error.response.data.message);\n  return Promise.reject(error)\n});\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}